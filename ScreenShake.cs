using System;
using System.Collections.Generic;
using ScriptPortal.Vegas;
using System.Windows.Forms;

namespace ScreenShake
{
    static class ScreenShake
    {
        // This noise was pre-generated in Processing by calling noise(x) and noise(0, x) respectively,
        // x being 0-100 in increments of 0.5
        static readonly double[] NOISE_X =
        {
            0.62253565, 0.62919337, 0.59156203, 0.5101629, 0.42697653, 0.2941875, 0.4221687, 0.38227996, 0.43411076, 0.3454585, 0.287685, 0.5074724, 0.63415176, 0.41468942, 0.4655775, 0.55492365, 0.5050491, 0.36573464, 0.4142474, 0.4304412, 0.39792037, 0.473522, 0.48417372, 0.4149597, 0.3753438, 0.47545356, 0.22108783, 0.3841207, 0.5656885, 0.3659422, 0.5484447, 0.2883389, 0.3160146, 0.27249235, 0.17573301, 0.23041022, 0.40226498, 0.30792442, 0.4659293, 0.55551845, 0.45389652, 0.25352192, 0.56989324, 0.5528535, 0.5091216, 0.47450697, 0.40633947, 0.36386654, 0.31349766, 0.5661125, 0.7158373, 0.47033125, 0.4811327, 0.42937902, 0.57574224, 0.53258777, 0.6738279, 0.57075846, 0.31020403, 0.4704269, 0.65133965, 0.47178623, 0.30393884, 0.6057979, 0.5398885, 0.43485743, 0.44129214, 0.3977817, 0.29315746, 0.391802, 0.32727227, 0.47811642, 0.5986665, 0.60771096, 0.23182061, 0.29052126, 0.29980713, 0.44904998, 0.69133765, 0.6970231, 0.67278224, 0.34000024, 0.17663974, 0.47084656, 0.6450732, 0.61985964, 0.58057976, 0.573494, 0.4702438, 0.63703793, 0.48330563, 0.5933367, 0.45173746, 0.51379913, 0.46596143, 0.67299753, 0.4639694, 0.60747755, 0.60250586, 0.65779126, 0.5223131, 0.33621228, 0.2795161, 0.23339751, 0.47933623, 0.35906267, 0.35256556, 0.34112468, 0.5906106, 0.51088107, 0.35270527, 0.3649842, 0.5205197, 0.50735575, 0.62550217, 0.48817655, 0.36591023, 0.49176535, 0.5164544, 0.5106954, 0.6894116, 0.7575729, 0.3969768, 0.49726295, 0.1743423, 0.44890568, 0.7347108, 0.6787863, 0.5086014, 0.42247447, 0.37996948, 0.34551087, 0.39130944, 0.3734127, 0.43084413, 0.3075993, 0.35550106, 0.265463, 0.46335527, 0.4413046, 0.18029508, 0.1958516, 0.2754955, 0.4267285, 0.32796437, 0.59581614, 0.7458528, 0.49105108, 0.37213928, 0.3855327, 0.2766892, 0.3644824, 0.13656345, 0.19143638, 0.26746303, 0.4916319, 0.5513233, 0.6029641, 0.57207185, 0.68406445, 0.475424, 0.3812062, 0.21671021, 0.29224506, 0.33006126, 0.49515122, 0.5882849, 0.74339193, 0.596681, 0.5049824, 0.5352629, 0.44841906, 0.50667304, 0.42063975, 0.55574906, 0.37877688, 0.37672108, 0.52888596, 0.66718453, 0.2850751, 0.29300362, 0.4962144, 0.6084149, 0.62826085, 0.4905258, 0.39471146, 0.49377996, 0.28005713, 0.25431323, 0.49645495, 0.66248095, 0.2959099, 0.23028849, 0.31630456, 0.61272895, 0.5271944, 0.64590365, 0.6483116, 0.76869476, 0.6656803
        };
        static readonly double[] NOISE_Y =
        {
            0.62253565, 0.32491314, 0.3160146, 0.3947943, 0.5398885, 0.5581898, 0.4639694, 0.618947, 0.5086014, 0.3788335, 0.475424, 0.34125233, 0.23028849, 0.5188691, 0.6668457, 0.76116735, 0.616819, 0.517947, 0.24797857, 0.20478275, 0.36583322, 0.27395648, 0.41005448, 0.59438103, 0.49914896, 0.61902946, 0.56439495, 0.6308862, 0.42655826, 0.42093554, 0.60640335, 0.5642033, 0.34751517, 0.39736694, 0.57994777, 0.55144966, 0.42821413, 0.3931148, 0.24213475, 0.41557544, 0.50405854, 0.49513516, 0.21597336, 0.30437577, 0.3700205, 0.48550665, 0.6684299, 0.4998933, 0.4088908, 0.38227803, 0.51387376, 0.3782112, 0.30741987, 0.5057064, 0.64291286, 0.4571368, 0.42284876, 0.4448867, 0.3641206, 0.656776, 0.73733157, 0.5497709, 0.7461538, 0.5854984, 0.3755613, 0.2598319, 0.19407558, 0.11699714, 0.23099497, 0.24120694, 0.31204683, 0.38047013, 0.19154577, 0.4651184, 0.44585156, 0.48046678, 0.4814814, 0.50588584, 0.51139283, 0.3363025, 0.41545165, 0.47714382, 0.65110236, 0.5537405, 0.3802544, 0.48870513, 0.4784019, 0.6758005, 0.52949166, 0.37881488, 0.47255456, 0.64645797, 0.62861705, 0.47179508, 0.39890736, 0.23723392, 0.36287296, 0.42357996, 0.254524, 0.561676, 0.42061898, 0.405142, 0.3642084, 0.4902295, 0.47705093, 0.62380826, 0.68941927, 0.46549875, 0.76581, 0.5574675, 0.4125743, 0.3429002, 0.3634833, 0.5266683, 0.54674613, 0.6317052, 0.56199414, 0.6671071, 0.8207482, 0.573974, 0.64138377, 0.5525074, 0.2771111, 0.5613795, 0.7304833, 0.7178893, 0.6454508, 0.45242274, 0.43141672, 0.3551643, 0.3225486, 0.3324352, 0.2665737, 0.18415812, 0.18516786, 0.47613016, 0.4738365, 0.50806147, 0.40806764, 0.3551805, 0.47664, 0.38875222, 0.62060046, 0.69152355, 0.2939282, 0.5341129, 0.63689953, 0.57835877, 0.42817014, 0.16114348, 0.35658994, 0.2622066, 0.21626608, 0.38446575, 0.31589016, 0.6378577, 0.45584455, 0.38021794, 0.26410437, 0.58121276, 0.61945, 0.26283994, 0.39050564, 0.37001365, 0.34412095, 0.42474926, 0.45160913, 0.50496393, 0.4463592, 0.4639075, 0.4863366, 0.43124115, 0.2749888, 0.44927746, 0.8065708, 0.6603992, 0.6519066, 0.5241712, 0.26310164, 0.5426615, 0.40072286, 0.53498787, 0.78696126, 0.6271043, 0.7757925, 0.5603435, 0.6436516, 0.7347316, 0.7291373, 0.46558988, 0.3377612, 0.5569397, 0.49057186, 0.54397887, 0.7517897, 0.54507786, 0.50642866, 0.7163055, 0.82133776, 0.46312848
        };

        public static void Apply()
        {
            Console.WriteLine("Hello, ScreenShake!");

            // Parameters
            double seed = 1234; // Some double between 1-200, or 0 for random
            double rotationSpeed = 0.15;  // Higher value == slower speed
            double rotationIntensity = 0.008;
            double shakeSpeed = SettingControl.SettingControls["Shake Speed"].Value;  // good range: 0.6 - ???
            double shakeIntensity = 1;  // previously 200
            double roughness = 0.01;  // Determines lerp amount, scale of 0-1

            // The x and y of the Picture In Picture effect for a given keyframe is (0.5 + offsetPosX, 0.5 + offsetPosY)
            double offsetPosX = 0;
            double offsetPosY = 0;

            double rotation;

            // These are used for animation smoothing
            double nextPosX;
            double nextPosY;
            
            foreach (PictureInPicture pip in VegasH.NewPictureInPictures)
            {
                if (seed == 0)
                {
                    seed = ((new Random()).NextDouble() * 199) + 1;
                }

                for (int frame = 0; frame < pip.VideoEvent.Length.FrameCount /* or some more relevant value */; frame++)
                {
                    rotation = Math.Sin(frame * rotationSpeed) * (Math.PI * rotationIntensity);
                    rotation *= 180 / Math.PI;
                    nextPosX = (GetLerpNoise((frame * shakeSpeed) + seed) * shakeIntensity) - (shakeIntensity / 2);
                    nextPosY = (GetLerpNoise((frame * shakeSpeed) + seed, true) * shakeIntensity) - (shakeIntensity / 2);
                    offsetPosX = Lerp(offsetPosX, nextPosX, roughness);
                    offsetPosY = Lerp(offsetPosY, nextPosY, roughness);

                    pip.MakeLocationKeyframe(0.5 + offsetPosX, 0.5 + offsetPosY, Timecode.FromFrames(pip.VideoEvent.Start.FrameCount + frame));
                    Console.WriteLine(string.Format("({0}, {1}) - {2}", offsetPosX, offsetPosY, rotation));
                }
            }          

        }

        static double GetLerpNoise(double position, bool isY = false)
        {
            position = Math.Abs(position) % NOISE_X.Length;
            if (isY)
            {
                return Lerp(NOISE_Y[(int)Math.Floor(position)], NOISE_Y[(int)Math.Ceiling(position)], position % 1);
            }
            else
            {
                return Lerp(NOISE_X[(int)Math.Floor(position)], NOISE_X[(int)Math.Ceiling(position)], position % 1);
            }
        }

        static double Lerp(double position, double destination, double by)
        {
            return position * (1 - by) + destination * by;
        }


    }
}
